type: edu
files:
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here

    max_water = 400
    max_milk = 540
    max_coffee = 120
    max_cups = 9
    max_money = 550


    def maker(water_parameter, coffee_parameter, max_water_parameter, max_milk_parameter,
              max_coffee_parameter, milk_parameter=None):
        number_of_cups_input = 1

        if milk_parameter is None:
            calculation = [max_water_parameter // water_parameter, max_coffee_parameter // coffee_parameter]

            if min(calculation) >= number_of_cups_input:
                return True
            else:
                print(f"No, I can make only {min(calculation)} cups of coffee")
                return False
        else:
            calculation = [max_water_parameter // water_parameter, max_milk_parameter // milk_parameter,
                           max_coffee_parameter // coffee_parameter]
            if min(calculation) >= number_of_cups_input:
                return True
            else:
                print(f"No, I can make only {min(calculation)} cups of coffee")
                return False


    def print_machine():
        print(f"""The coffee machine has:
    {max_water} of water
    {max_milk} of milk
    {max_coffee} of coffee beans
    {max_cups} of disposable cups
    {max_money} of money""")


    print("Write action (buy, fill, take, remaining, exit):")
    main_option = input()

    while max_water > 0 or max_milk > 0 or max_coffee > 0 or \
            max_cups > 0:

        if main_option == "buy":
            print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:")
            coffee_option = input()
            try:
                coffee_option = int(coffee_option)
            except ValueError:
                print("Write action (buy, fill, take, remaining, exit):")
                main_option = input()
                continue
            if coffee_option == 1:
                water = 250
                coffee = 16
                price = 4
                if maker(water, coffee, max_water, max_milk, max_coffee):
                    max_money += price
                    max_cups -= 1
                    max_water -= water
                    max_coffee -= coffee
                    print("I have enough resources, making you a coffee!")
            elif coffee_option == 2:
                water = 350
                milk = 75
                coffee = 20
                price = 7
                if maker(water, coffee, max_water, max_milk, max_coffee, milk_parameter=milk):
                    max_money += price
                    max_cups -= 1
                    max_water -= water
                    max_milk -= milk
                    max_coffee -= coffee
                    print("I have enough resources, making you a coffee!")
            elif coffee_option == 3:
                water = 200
                milk = 100
                coffee = 12
                price = 6
                if maker(water, coffee, max_water, max_milk, max_coffee, milk_parameter=milk):
                    max_money += price
                    max_cups -= 1
                    max_water -= water
                    max_milk -= milk
                    max_coffee -= coffee
                    print("I have enough resources, making you a coffee!")

        elif main_option == "fill":
            print("Write how many ml of water do you want to add:")
            max_water += int(input())
            print("Write how many ml of milk do you want to add:")
            max_milk += int(input())
            print("Write how many grams of coffee beans do you want to add:")
            max_coffee += int(input())
            print("Write how many disposable cups of coffee do you want to add:")
            max_cups += int(input())

        elif main_option == "take":
            print(f"I gave you ${max_money}")
            max_money = 0

        elif main_option == "remaining":
            print_machine()

        print("Write action (buy, fill, take, remaining, exit):")
        main_option = input()

        if main_option == "exit":
            break
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import CoffeeMachineTest

    if __name__ == '__main__':    CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement#comment
status: Solved
record: 5
